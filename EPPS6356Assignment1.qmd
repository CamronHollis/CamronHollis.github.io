---
title: "EPPS 6356 Assignment 1"
---

### 1. Anscombe.R

```{r include=FALSE}
library(gsubfn)
library(tidyverse)

knitr::opts_chunk$set(echo = TRUE)
```

```{r echo = F, out.width = "50%", out.height= "65%", results = 'hide', fig.keep='all'}

data(anscombe)
summary(anscombe)

plot(anscombe$x1,anscombe$y1)
summary(anscombe)

lm1 <- lm(y1 ~ x1, data=anscombe)
summary(lm1)
lm2 <- lm(y2 ~ x2, data=anscombe)
summary(lm2)
lm3 <- lm(y3 ~ x3, data=anscombe)
summary(lm3)
lm4 <- lm(y4 ~ x4, data=anscombe)
summary(lm4)
plot(anscombe$x1,anscombe$y1)
abline(coefficients(lm1))
plot(anscombe$x2,anscombe$y2)
abline(coefficients(lm2))
plot(anscombe$x3,anscombe$y3)
abline(coefficients(lm3))
plot(anscombe$x4,anscombe$y4)
abline(coefficients(lm4))

ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))

# Plot using for loop
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  ## or   ff[[2]] <- as.name(paste0("y", i))
  ##      ff[[3]] <- as.name(paste0("x", i))
  mods[[i]] <- lmi <- lm(ff, data = anscombe)
  print(anova(lmi))
}

sapply(mods, coef)  # Note the use of this function
lapply(mods, function(fm) coef(summary(fm)))

# Preparing for the plots
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))

# Plot charts using for loop
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
       xlim = c(3, 19), ylim = c(3, 13))
  abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)

```

### 2. Generative Art Review

This generative art is produced by Adobe using a 'Generative Fill' tool. The tool was used on famous album covers, generating images beyond the previous borders of the covers, to produce the below results.

```{r echo = F, out.width = "30%", out.height= "30%"}

knitr::include_graphics("https://cdn.arstechnica.net/wp-content/uploads/2023/05/beatles_hero_1-800x450.jpg")

knitr::include_graphics("https://wersm.com/wp-content/uploads/2023/06/wersm-generative-AI-album-covers-Metalilica.jpeg?ezimgfmt=rs:799x799/rscb2/ng:webp/ngcb2")

knitr::include_graphics("https://wersm.com/wp-content/uploads/2023/06/wersm-generative-AI-album-covers-pink-floyd.jpeg?ezimgfmt=rs:799x799/rscb2/ng:webp/ngcb2")

```

Respectfully, it does a bad job. The generative art muddies the artistic choices made on the album covers and makes goofy additions. The generative tool is not purposeful nor subtle, and simply creates vaguely related scenes to fill out as much space as the user commands.

### 3. Fall.R

```{r echo = F, out.width = "50%", out.height= "65%", results = 'hide', fig.keep='all'}

axiom="X"
rules=list("X"="F-[[X]+X]+F[+FX]-X", "F"="FF")
angle=22.5
depth=6


for (i in 1:depth) axiom=gsubfn(".", rules, axiom)

actions=str_extract_all(axiom, "\\d*\\+|\\d*\\-|F|L|R|\\[|\\]|\\|") %>% unlist

status=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))
points=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)

for (action in actions)
{
  if (action=="F")
  {
    x=points[1, "x1"]+cos(points[1, "alfa"]*(pi/180))
    y=points[1, "y1"]+sin(points[1, "alfa"]*(pi/180))
    points[1,"x2"]=x
    points[1,"y2"]=y
    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,
               alfa=points[1, "alfa"],
               depth=points[1,"depth"]) %>% rbind(points)->points
  }
  if (action %in% c("+", "-")){
    alfa=points[1, "alfa"]
    points[1, "alfa"]=eval(parse(text=paste0("alfa",action, angle)))
  }
  if(action=="["){
    data.frame(x=points[1, "x1"], y=points[1, "y1"], alfa=points[1, "alfa"]) %>%
      rbind(status) -> status
    points[1, "depth"]=points[1, "depth"]+1
  }

  if(action=="]"){
    depth=points[1, "depth"]
    points[-1,]->points
    data.frame(x1=status[1, "x"], y1=status[1, "y"], x2=NA, y2=NA,
               alfa=status[1, "alfa"],
               depth=depth-1) %>%
      rbind(points) -> points
    status[-1,]->status
  }
}

ggplot() +
  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),
               lineend = "round",
               color="darksalmon", # Set your own Fall color?
               data=na.omit(points)) +
  coord_fixed(ratio = 1) +
  theme_void() # No grid nor axes

```

The leaf color is 'darksalmon', which is how I like my salmon.

### 4. Chart critique

![](https://i.imgur.com/9BrT3IS_d.webp?maxwidth=760&fidelity=grand)

This is the Florida gun death chart, created by Reuters. This chart was criticized on its publication in 2014 for confusing people by having the line going down when it was really depicting an increase in gun deaths: At first glance, one might take away that gun murders had gone down in Florida after the passage of the Stand Your Ground law, while in fact the opposite is true. The creators of the graph defended themselves by claiming it was stylized after dripping blood, evocative of the deaths caused by gun violence. If that was their aim, they didn't really commit. For example, if they made upside down bars instead of a line, it would have looked better.

The dripping blood aesthetic is not the only criticism of that can be made of the graph. The time axis is badly depicted, where it is harder to tell which dot is attached to which year, besides from the clearly labeled 2005. It is also not clear why the first and last point has a labeled death value, but no other point. The range of values is also much more narrow than the chart because the authors decided to include 0 and 1000, a choice I assume was to expand the amount of red headroom for their blood aesthetic.

The font and color choices are fine, although the big block of red makes the chart hart to look at for long period.
